---------------------------------------
	Imaginary suite
---------------------------------------

bernoulli
~~~~~~~~~
Assuming that bernoulli takes a function argument as well, I have added on more parameter to the function which
takes Integer value and returns an Integer. Later, original bernoulli is applied on this value. Semantics of the program
remains the same.
Running it with --nrpc flag is throwing error right now, need to debug this.

digits-of-e1
~~~~~~~~~~~~
Works with NRPC as well.

tak
~~~
Output of this benchmark is weird, 
e.g. ((coerce (main :: (IO ()))) :: (State# RealWorld) -> (((((#,#) LiftedRep) LiftedRep) (State# RealWorld)) ())) (State# RealWorld) = (#State# RealWorld, ()#)    
| generated: 22, 23, 21
 --- stdout --- 
        ['2', '2', toEnum 10]

x2n1
~~~
This is throwing base library error
109 | {-# SPECIALISE phase :: Complex Double -> Double #-}
    |                ^^^^^
G2: /Users/abhachaudhary/.g2/base-4.9.1.0/Data/Complex.hs:109:16: error:
    Not in scope: `phase'

gen_regexps
~~~~~~~~~~~
Working now


kahan
~~~~~
Throwing error:

G2: evalVar: bad input.Id (Name "runSTUArray" (Just "Data.Array.ST") 8214565720323788656 Nothing) (TyForAll (Id (Name "i" Nothing 6989586621679015682 Nothing) TYPE) (TyForAll (Id (Name "e" Nothing 6989586621679015683 Nothing) TYPE) (TyFun (TyForAll (Id (Name "s" Nothing 6989586621679015684 Nothing) TYPE) (TyApp (TyApp (TyCon (Name "ST" (Just "GHC.ST") 8214565720323794206 Nothing) (TyFun TYPE (TyFun TYPE TYPE))) (TyVar (Id (Name "s" Nothing 6989586621679015684 Nothing) TYPE))) (TyApp (TyApp (TyApp (TyCon (Name "STUArray" (Just "Data.Array.Base") 8214565720323788187 Nothing) (TyFun TYPE (TyFun TYPE (TyFun TYPE TYPE)))) (TyVar (Id (Name "s" Nothing 6989586621679015684 Nothing) TYPE))) (TyVar (Id (Name "i" Nothing 6989586621679015682 Nothing) TYPE))) (TyVar (Id (Name "e" Nothing 6989586621679015683 Nothing) TYPE))))) (TyApp (TyApp (TyCon (Name "UArray" (Just "Data.Array.Base") 8214565720323788189 Nothing) (TyFun TYPE (TyFun TYPE TYPE))) (TyVar (Id (Name "i" Nothing 6989586621679015682 Nothing) TYPE))) (TyVar (Id (Name "e" Nothing 6989586621679015683 Nothing) TYPE))))))
CallStack (from HasCallStack):
  error, called at src/G2/Execution/Rules.hs:133:19 in g2-0.2.0.0-inplace:G2.Execution.Rules


rfib
~~~~
G2: Unrecognized Data (DataCon {dc_name = Name "D#" (Just "GHC.Types") 8214565720323790799 (Just (Span {start = Loc {line = 38, col = 15, file = "/Users/abhachaudhary/.g2/base-4.9.1.0/GHC/Types2.hs"}, end = Loc {line = 38, col = 25, file = "/Users/abhachaudhary/.g2/base-4.9.1.0/GHC/Types2.hs"}})), dc_type = TyFun (TyLitFP 11 53) (TyCon (Name "Double" (Just "GHC.Types") 8214565720323790798 Nothing) TYPE), dc_univ_tyvars = [], dc_exist_tyvars = []}) with args [Lit (LitDouble 1.0)] in funcToSMT
CallStack (from HasCallStack):
  error, called at src/G2/Solver/Converters.hs:418:17 in g2-0.2.0.0-inplace:G2.Solver.Converters


---------------------------------------
	Spectral suite
---------------------------------------

ansi
~~~~
This one is not intresting because the program doesn't use input value.

atom
~~~~
Same for this one.

awards
~~~~~~
Same for this one.

boyer
~~~~~

calendar
~~~~~~~~
G2: evalVar: bad input.Id (Name "ioError" (Just "GHC.IO.Exception") 8214565720323784736 Nothing) (TyForAll (Id (Name "a" Nothing 6989586621679017623 Nothing) TYPE) (TyFun (TyCon (Name "IOError" (Just "GHC.IO.Exception") 8214565720323784852 Nothing) TYPE) (TyApp (TyCon (Name "IO" (Just "GHC.Types") 8214565720323797324 Nothing) (TyFun TYPE TYPE)) (TyVar (Id (Name "a" Nothing 6989586621679017623 Nothing) TYPE)))))
CallStack (from HasCallStack):
  error, called at src/G2/Execution/Rules.hs:133:19 in g2-0.2.0.0-inplace:G2.Execution.Rules

clausify
~~~~~~~~
It's working

constraints
~~~~~~~~~~~
I don;t see it's generating any symbolic function instantiation
((coerce (main :: (IO ()))) :: (State# RealWorld) -> (((((#,#) LiftedRep) LiftedRep) (State# RealWorld)) ())) (State# RealWorld) = error	| generated: "  "
((coerce (main :: (IO ()))) :: (State# RealWorld) -> (((((#,#) LiftedRep) LiftedRep) (State# RealWorld)) ())) (State# RealWorld) = error	| generated: [toEnum 0, ' ']
((coerce (main :: (IO ()))) :: (State# RealWorld) -> (((((#,#) LiftedRep) LiftedRep) (State# RealWorld)) ())) (State# RealWorld) = error	| generated: "Â  "
((coerce (main :: (IO ()))) :: (State# RealWorld) -> (((((#,#) LiftedRep) LiftedRep) (State# RealWorld)) ())) (State# RealWorld) = error	| generated: " "
((coerce (main :: (IO ()))) :: (State# RealWorld) -> (((((#,#) LiftedRep) LiftedRep) (State# RealWorld)) ())) (State# RealWorld) = error	| generated: []

